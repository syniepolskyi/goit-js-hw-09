{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SA+BA,SAASC,EAAWC,GAClB,IA7BqBC,EAAUC,EACzBC,EA4BDC,EAAkBJ,EAAlBC,SAAUI,EAAQL,EAARM,KACTC,EAAQF,EAAKG,SACbC,EAASC,SAASH,EAAc,OAAEI,MAAM,IACxCC,EAAQF,SAASH,EAAa,MAAEI,MAAM,IAExCE,EADSH,SAASH,EAAY,KAAEI,MAAM,IAE1B,IAAbP,IACDC,EAAKS,aAAa,UAAU,QAC5BD,EAAYD,IArCOX,EAuCSG,EAvCCF,EAuCSW,EAtClCV,EAAgBY,KAAKC,SAAW,GAEtB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLjB,EACFe,EAAQ,CAACjB,SAASA,EAAUC,MAAMA,IAElCiB,EAAO,CAAClB,SAASA,EAAUC,MAAMA,G,GAElCA,E,KA8BGmB,MAAK,SAACC,GACZ,IAAOrB,EAAmBqB,EAAnBrB,SAAUC,EAASoB,EAATpB,MACjBL,EAAA0B,OAAOC,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE9DwB,OAAM,SAACJ,GACN,IAAOrB,EAAmBqB,EAAnBrB,SAAUC,EAASoB,EAATpB,MACjBL,EAAA0B,OAAOI,QAAQ,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE3D0B,SAAQ,WACP,GAAGxB,EAAWK,EAEZ,OADAT,EAAKC,WACEF,EAAWC,GAEpBK,EAAKwB,gBAAgB,U,IAMZC,SAASC,cAAc,aAE/BC,iBAAiB,UAAU,SAACC,GA7CjC,IAAkBC,GA8ChBD,EAAGE,iBACAF,EAAGG,cAAcC,aAAa,cA/CjBH,EAkDHD,EAAGG,cAjDH,CAAC,SAAU,QAAS,QACrBE,QAAO,SAACC,EAAIC,GACtB,IAAIC,EAAI/B,SAASwB,EAAK1B,SAASgC,GAAK7B,MAAM,IACtC+B,GAAUC,MAAMF,IAAMA,EAAI,EAI9B,OAHIC,GACF7C,EAAA0B,OAAOqB,QAAQ,GAAOnB,OAAJe,EAAI,yBAEjBD,GAAOG,C,IACb,IAgDH3C,EAJa,CACXE,SAAU,EACVK,KAAM2B,EAAGG,gB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio'\nimport \"notiflix/dist/notiflix-3.2.5.min.css\"\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position:position, delay:delay});\n      } else {\n        reject({position:position, delay:delay});\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n\nfunction validate(form){\n  const keys = ['amount', 'delay', 'step']\n  return keys.reduce((acc,key) =>{\n    let v = parseInt(form.elements[key].value,10)\n    let valid = (!isNaN(v) && v > 0)\n    if(!valid){\n      Notify.warning(`${key} must be integer > 0`)\n    }\n    return acc && valid\n  }, true)\n}\n\nfunction doPromises(data){\n  let {position, form} = data\n  const elems = form.elements\n  const amount = parseInt(elems['amount'].value,10)\n  const delay = parseInt(elems['delay'].value,10)\n  const step = parseInt(elems['step'].value,10)\n  let currDelay = step\n  if(position === 1){\n    form.setAttribute(\"pending\",\"true\")\n    currDelay = delay\n  }\n  const promise = createPromise(position, currDelay )\n  promise.then((data) => {\n    const {position, delay} = data\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n  })\n  .catch((data) => {\n    const {position, delay} = data\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n  })\n  .finally(() => {\n    if(position < amount){\n      data.position++\n      return doPromises(data)\n    }\n    form.removeAttribute(\"pending\")\n  })\n\n}\n\n\nconst form = document.querySelector('form.form')\n\nform.addEventListener(\"submit\", (ev) => {\n  ev.preventDefault()\n  if(ev.currentTarget.getAttribute(\"pending\")){\n    return\n  }\n  if(!validate(ev.currentTarget)){\n    return\n  }\n  const data = {\n    position: 1,\n    form: ev.currentTarget\n  }\n  doPromises(data)\n})\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$doPromises","data1","position","delay","shouldResolve","position1","form2","form","elems","elements","amount","parseInt","value","delay1","currDelay","setAttribute","Math","random","Promise","resolve","reject","setTimeout","then","data","Notify","success","concat","catch","failure","finally","removeAttribute","document","querySelector","addEventListener","ev","form1","preventDefault","currentTarget","getAttribute","reduce","acc","key","v","valid","isNaN","warning"],"version":3,"file":"03-promises.1920acbc.js.map"}